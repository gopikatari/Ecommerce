{"version":3,"sources":["./src/app/users/reducers/index.ts","./src/app/users/users-routing.module.ts","./src/app/users/components/user-register/user-register.component.ts","./src/app/users/components/user-register/user-register.component.html","./src/app/users/components/user-profile/user-profile.component.ts","./src/app/users/components/user-profile/user-profile.component.html","./src/app/users/components/user-login/user-login.component.ts","./src/app/users/components/user-login/user-login.component.html","./src/app/users/users.component.ts","./src/app/users/users.component.html","./src/app/users/users.module.ts"],"names":[],"mappings":";;;;;;;;;;AAOA;AAAA;AAAA;AAAA;AAAA;AAAgE;AAEzD,MAAM,eAAe,GAAG,OAAO,CAAC;AAMhC,MAAM,QAAQ,GAA4B,EAEhD,CAAC;AAGK,MAAM,YAAY,GAAyB,CAAC,qEAAW,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;;;;;;;;;;;;;ACpBpF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyC;AACc;AAEJ;AAC6B;AACS;AACH;;;AAEtF,MAAM,MAAM,GAAW;IACrB,EAAE,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,+DAAc,EAAE;IACvC,EAAE,IAAI,EAAE,SAAS,EAAE,SAAS,EAAE,oGAAoB,EAAE;IACpD,EAAE,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,8FAAkB,EAAE;IAChD,EAAE,IAAI,EAAE,UAAU,EAAE,SAAS,EAAE,uGAAqB,EAAE;CACrD,CAAC;AAMG,MAAM,kBAAkB;;iGAAlB,kBAAkB;8JAAlB,kBAAkB,kBAHpB,CAAC,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,EAC9B,4DAAY;mIAEX,kBAAkB,uFAFnB,4DAAY;6FAEX,kBAAkB;cAJ9B,sDAAQ;eAAC;gBACR,OAAO,EAAE,CAAC,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;gBACxC,OAAO,EAAE,CAAC,4DAAY,CAAC;aACxB;;;;;;;;;;;;;;AClBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;AAIQ;;;;;;;ICclD,0EACE;IAAA,6EACE;IAAA,mEAAkC;IACpC,4DAAS;IACT,wEAAO;IAAA,oFAAyB;IAAA,4DAAQ;IAC1C,4DAAM;;;IAgBE,sEACE;IAAA,4EAA2B;IAAA,kFAAuB;IAAA,4DAAQ;IAC5D,4DAAM;;;IACN,4EACE;IAAA,uEACF;IAAA,4DAAQ;;;IAWR,sEACE;IAAA,4EAA2B;IAAA,+EAAoB;IAAA,4DAAQ;IACzD,4DAAM;;;IACN,4EACE;IAAA,uEACF;IAAA,4DAAQ;;;IAWR,sEACE;IAAA,4EAA2B;IAAA,kFAAuB;IAAA,4DAAQ;IAC5D,4DAAM;;;IACN,4EACE;IAAA,uEACF;IAAA,4DAAQ;;ADhEjB,MAAM,qBAAqB;IAShC,YAAoB,KAAkB;QAAlB,UAAK,GAAL,KAAK,CAAa;QAP/B,SAAI,GAAS;YAClB,IAAI,EAAG,EAAE;YACT,KAAK,EAAG,EAAE;YACV,QAAQ,EAAG,EAAE;SACd,CAAC;QACK,YAAO,GAAW,KAAK,CAAC;IAEW,CAAC;IAE3C,QAAQ;IACR,CAAC;IAEM,cAAc;QACnB,IAAG,IAAI,CAAC,IAAI,CAAC,IAAI,KAAK,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,KAAK,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,KAAK,EAAE,EAAC;YAC9E,WAAW;YACX,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,kEAAwB,CAAC,EAAC,IAAI,EAAG,IAAI,CAAC,IAAI,EAAC,CAAC,CAAC,CAAC;YAClE,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;SACtB;aACG;YACF,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;SACrB;IACH,CAAC;;0FAvBU,qBAAqB;qGAArB,qBAAqB;QCXlC,6EACE;QAAA,yEACE;QAAA,yEACE;QAAA,yEACE;QAAA,uEACE;QAAA,kEAA8B;QAAC,yEAAa;QAAA,4DAAI;QACpD,4DAAM;QACR,4DAAM;QACR,4DAAM;QACR,4DAAU;QAGV,6EACE;QAAA,yEACE;QAAA,yEACE;QAAA,0EACE;QACA,mHAKM;QACN,0EACE;QAAA,2EACE;QAAA,yEAAc;QAAA,oEAAQ;QAAA,4DAAI;QAC5B,4DAAM;QACN,2EACE;QAAA,gFACE;QAD2B,8IAAU,oBAAgB,IAAC;QACtD,2EACE;QAAA,iFAQA;QALE,6LAAuB;QAHzB,4DAQA;QAAA,oHAEM;QACN,wHAEQ;QACV,4DAAM;QACN,2EACE;QAAA,iFAQA;QALE,8LAAwB;QAH1B,4DAQA;QAAA,oHAEM;QACN,wHAEQ;QACV,4DAAM;QACN,2EACE;QAAA,iFAQA;QALE,iMAA2B;QAH7B,4DAQA;QAAA,oHAEM;QACN,wHAEQ;QACV,4DAAM;QACN,uEACE;QAAA,wEACF;QAAA,4DAAM;QACN,uEACE;QAAA,yEAAO;QAAA,8EACL;QAAA,yEAAgE;QAAA,iEAAK;QAAA,4DAAI;QAC3E,4DAAQ;QACV,4DAAM;QACR,4DAAO;QACT,4DAAM;QACN,2EACE;QAAA,sEACF;QAAA,4DAAM;QACR,4DAAM;QACR,4DAAM;QACR,4DAAM;QACR,4DAAM;QACR,4DAAU;;;;;QA7EI,2DAAa;QAAb,6EAAa;QAiBT,0DAAyD;QAAzD,mGAAyD;QADzD,kFAAuB;QAKnB,0DAA0C;QAA1C,4FAA0C;QAGxC,0DAAwC;QAAxC,0FAAwC;QAS9C,0DAAmD;QAAnD,mGAAmD;QADnD,mFAAwB;QAKpB,0DAAoC;QAApC,4FAAoC;QAGlC,0DAAkC;QAAlC,0FAAkC;QASxC,0DAAyD;QAAzD,mGAAyD;QADzD,sFAA2B;QAKvB,0DAA0C;QAA1C,4FAA0C;QAGxC,0DAAwC;QAAxC,0FAAwC;;6FD9DnD,qBAAqB;cALjC,uDAAS;eAAC;gBACT,QAAQ,EAAE,mBAAmB;gBAC7B,WAAW,EAAE,gCAAgC;gBAC7C,SAAS,EAAE,CAAC,+BAA+B,CAAC;aAC7C;;;;;;;;;;;;;;AEXD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;AAIR;AAEgB;AACC;;;;;;;ICiCnD,sEACE;IAAA,qEACF;IAAA,4DAAM;;;IAgBF,yEACE;IAAA,yEACE;IAAA,uDACF;IAAA,4DAAK;IACL,yEACE;IAAA,uDACF;IAAA,4DAAK;IACL,yEACE;IAAA,uDACF;IAAA,4DAAK;IACL,yEACE;IAAA,uDACF;IAAA,4DAAK;IACL,yEACE;IAAA,wDACF;IAAA,4DAAK;IACL,0EACE;IAAA,wDACF;IAAA,4DAAK;IACL,0EACE;IAAA,wDACF;IAAA,4DAAK;IACP,4DAAK;;;IApBD,0DACF;IADE,sGACF;IAEE,0DACF;IADE,0GACF;IAEE,0DACF;IADE,8GACF;IAEE,0DACF;IADE,sGACF;IAEE,0DACF;IADE,wGACF;IAEE,0DACF;IADE,4GACF;IAEE,0DACF;IADE,0GACF;;;;IAEF,sEACC;IACC,2EACE;IADI,2UAAgC;IACpC,0EACE;IAAA,0EACE;IAAA,2EAAmD;IAAA,+DAAI;IAAA,4DAAO;IAChE,4DAAM;IACN,4EAIF;IAFI,gWAA0B;IAF5B,4DAIF;IAAA,4DAAM;IACN,0EACE;IAAA,0EACE;IAAA,2EAAmD;IAAA,kEAAM;IAAA,4DAAO;IAClE,4DAAM;IACN,6EAIF;IAFI,mWAA4B;IAF9B,4DAIF;IAAA,4DAAM;IACN,2EACE;IAAA,2EACE;IAAA,4EAAmD;IAAA,oEAAQ;IAAA,4DAAO;IACpE,4DAAM;IACN,6EAIF;IAFI,qWAA8B;IAFhC,4DAIF;IAAA,4DAAM;IACN,2EACE;IAAA,2EACE;IAAA,4EAAmD;IAAA,gEAAI;IAAA,4DAAO;IAChE,4DAAM;IACN,6EAIF;IAFI,iWAA0B;IAF5B,4DAIF;IAAA,4DAAM;IACN,2EACE;IAAA,2EACE;IAAA,4EAAmD;IAAA,iEAAK;IAAA,4DAAO;IACjE,4DAAM;IACN,6EAIF;IAFI,oWAA2B;IAF7B,4DAIF;IAAA,4DAAM;IACN,2EACE;IAAA,2EACE;IAAA,4EAAmD;IAAA,mEAAO;IAAA,4DAAO;IACnE,4DAAM;IACN,6EAIF;IAFI,sWAA6B;IAF/B,4DAIF;IAAA,4DAAM;IACN,2EACE;IAAA,2EACE;IAAA,4EAAmD;IAAA,oEAAQ;IAAA,4DAAO;IACpE,4DAAM;IACN,6EAIF;IAFI,kWAAyB;IAF3B,4DAIF;IAAA,4DAAM;IACN,2EACE;IAAA,2EACE;IAAA,4EAAmD;IAAA,kEAAM;IAAA,4DAAO;IAClE,4DAAM;IACN,6EAIF;IAFI,qWAA4B;IAF9B,4DAIF;IAAA,4DAAM;IACN,uEACE;IAAA,wEACF;IAAA,4DAAM;IACR,4DAAO;IACT,4DAAM;;;IAtEE,0DAA0B;IAA1B,wFAA0B;IAS1B,0DAA4B;IAA5B,0FAA4B;IAS5B,0DAA8B;IAA9B,4FAA8B;IAS9B,0DAA0B;IAA1B,wFAA0B;IAS1B,0DAA2B;IAA3B,yFAA2B;IAS3B,0DAA6B;IAA7B,2FAA6B;IAS7B,0DAAyB;IAAzB,uFAAyB;IASzB,0DAA4B;IAA5B,0FAA4B;;;;IA7GxC,0EACE;IAAA,0EACE;IAAA,2EAAiB;IAAA,0EAAe;IAAA,4DAAO;IACvC,2EACE;IAAA,0EACE;IAAA,4EAIA;IAFE,4VAA2B;IAF7B,4DAIA;IAAA,4EAAwD;IAAA,yEAAc;IAAA,4DAAQ;IAChF,4DAAM;IACR,4DAAO;IACT,4DAAM;IACN,0EACE;IAAA,yHAsBK;IACL,2HA+EM;IACR,4DAAM;IACR,4DAAM;;;IA/GI,0DAA2B;IAA3B,yFAA2B;IAOT,0DAAoB;IAApB,uFAAoB;IAuBtC,0DAAmB;IAAnB,sFAAmB;;ADnE9B,MAAM,oBAAoB;IAM/B,YAAoB,WAAuB,EACvB,KAAkB;QADlB,gBAAW,GAAX,WAAW,CAAY;QACvB,UAAK,GAAL,KAAK,CAAa;QAL/B,aAAQ,GAAS,EAAW,CAAC;QAC7B,YAAO,GAAY,EAAc,CAAC;QAClC,kBAAa,GAAW,KAAK,CAAC;QAC9B,YAAO,GAAW,KAAK,CAAC;IAEW,CAAC;IAE3C,QAAQ;QACN,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC;QAC/C,IAAG,IAAI,CAAC,QAAQ,EAAC;YACf,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC;SACtC;QAED,0CAA0C;QAC1C,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,0DAAM,CAAC,qEAA0B,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,KAAK,EAAE,EAAE;YACrE,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;QAChC,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,mBAAmB;QACxB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC9C,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,mEAAyB,CAAC,EAAC,OAAO,EAAG,IAAI,CAAC,OAAO,EAAC,CAAC,CAAC,CAAC;QACzE,kCAAkC;QAClC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,0DAAM,CAAC,qEAA0B,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,KAAK,EAAE,EAAE;YACtE,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC;YAC3B,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC;QACpC,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;IAC7B,CAAC;IAEM,WAAW,CAAC,OAAgB;QACjC,IAAI,WAAW,GAAY;YACzB,IAAI,EAAG,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE;YAC1B,MAAM,EAAG,OAAO,CAAC,MAAM,CAAC,IAAI,EAAE;YAC9B,QAAQ,EAAG,OAAO,CAAC,QAAQ,CAAC,IAAI,EAAE;YAClC,IAAI,EAAG,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE;YAC1B,KAAK,EAAG,OAAO,CAAC,KAAK,CAAC,IAAI,EAAE;YAC5B,OAAO,EAAE,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE;YAC/B,GAAG,EAAG,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE;YACxB,MAAM,EAAG,OAAO,CAAC,MAAM,CAAC,IAAI,EAAE;SAC/B,CAAC;QACF,OAAQ,WAAW,CAAC;IACtB,CAAC;;wFA5CU,oBAAoB;oGAApB,oBAAoB;QCbjC,6EACE;QAAA,yEACE;QAAA,yEACE;QAAA,yEACE;QAAA,uEACE;QAAA,kEAAiC;QAAC,wEAAY;QAAA,4DAAI;QACtD,4DAAM;QACR,4DAAM;QACR,4DAAM;QACR,4DAAU;QAGV,6EACE;QAAA,yEACE;QAAA,yEACE;QAAA,0EACE;QAAA,qEACF;QAAA,4DAAM;QACN,0EACE;QAAA,2EACE;QAAA,2EACE;QAAA,yEAAc;QAAA,4EAAgB;QAAA,4DAAI;QACpC,4DAAM;QACN,2EACI;QAAA,0EACE;QAAA,0EACE;QAAA,wDACF;QAAA,4DAAK;QACL,0EACE;QAAA,wDACF;QAAA,4DAAK;QACL,0EACE;QAAA,wDACF;QAAA,4DAAK;QACP,4DAAK;QACT,4DAAM;QACR,4DAAM;QAGN,mHAEM;QAEN,oHAsHM;QACR,4DAAM;QACR,4DAAM;QACR,4DAAM;QACR,4DAAU;;QArJG,2DAAuB;QAAvB,iJAAuB;QAUlB,0DACF;QADE,oGACF;QAEE,0DACF;QADE,sGACF;QAEE,0DACF;QADE,oIACF;QAMF,0DAAa;QAAb,6EAAa;QAIqB,0DAAc;QAAd,8EAAc;;6FD9BjD,oBAAoB;cALhC,uDAAS;eAAC;gBACT,QAAQ,EAAE,kBAAkB;gBAC5B,WAAW,EAAE,+BAA+B;gBAC5C,SAAS,EAAE,CAAC,8BAA8B,CAAC;aAC5C;;;;;;;;;;;;;;AEbD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;AAIQ;;;;;;;ICclD,0EACE;IAAA,6EACE;IAAA,mEAAkC;IACpC,4DAAS;IACT,wEAAO;IAAA,oFAAyB;IAAA,4DAAQ;IAC1C,4DAAM;;;IAgBE,sEACE;IAAA,4EAA2B;IAAA,+EAAoB;IAAA,4DAAQ;IACzD,4DAAM;;;IACN,4EACE;IAAA,uEACF;IAAA,4DAAQ;;;IAWR,sEACE;IAAA,4EAA2B;IAAA,kFAAuB;IAAA,4DAAQ;IAC5D,4DAAM;;;IACN,4EACE;IAAA,uEACF;IAAA,4DAAQ;;ADhDjB,MAAM,kBAAkB;IAS7B,YAAoB,KAAkB;QAAlB,UAAK,GAAL,KAAK,CAAa;QAP/B,SAAI,GAAS;YAClB,IAAI,EAAG,EAAE;YACT,KAAK,EAAG,EAAE;YACV,QAAQ,EAAG,EAAE;SACd,CAAC;QACK,YAAO,GAAW,KAAK,CAAC;IAEW,CAAC;IAE3C,QAAQ;IACR,CAAC;IAEM,WAAW;QAChB,IAAG,IAAI,CAAC,IAAI,CAAC,KAAK,KAAK,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,KAAK,EAAE,EAAC;YACrD,WAAW;YACX,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,+DAAqB,CAAC,EAAC,IAAI,EAAG,IAAI,CAAC,IAAI,EAAC,CAAC,CAAC,CAAC;YAC/D,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;SACtB;aACG;YACF,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;SACrB;IACH,CAAC;;oFAvBU,kBAAkB;kGAAlB,kBAAkB;QCX/B,6EACE;QAAA,yEACE;QAAA,yEACE;QAAA,yEACE;QAAA,uEACE;QAAA,kEAAiC;QAAC,sEAAU;QAAA,4DAAI;QACpD,4DAAM;QACR,4DAAM;QACR,4DAAM;QACR,4DAAU;QAGV,6EACE;QAAA,yEACE;QAAA,yEACE;QAAA,0EACE;QACA,gHAKM;QACN,0EACE;QAAA,2EACE;QAAA,yEAAc;QAAA,iEAAK;QAAA,4DAAI;QACzB,4DAAM;QACN,2EACE;QAAA,gFACE;QADwB,2IAAU,iBAAa,IAAC;QAChD,2EACE;QAAA,iFAQA;QALI,2LAAwB;QAH5B,4DAQA;QAAA,iHAEM;QACN,qHAEQ;QACV,4DAAM;QACN,2EACE;QAAA,iFAQA;QALI,8LAA2B;QAH/B,4DAQA;QAAA,iHAEM;QACN,qHAEQ;QACV,4DAAM;QACN,uEACE;QAAA,wEACF;QAAA,4DAAM;QACN,uEACE;QAAA,yEAAO;QAAA,gFACL;QAAA,yEAAmE;QAAA,oEAAQ;QAAA,4DAAI;QACjF,4DAAQ;QACV,4DAAM;QACR,4DAAO;QACT,4DAAM;QACN,2EACE;QAAA,sEACF;QAAA,4DAAM;QACR,4DAAM;QACR,4DAAM;QACR,4DAAM;QACR,4DAAM;QACR,4DAAU;;;;QA7DI,2DAAa;QAAb,6EAAa;QAiBP,0DAAmD;QAAnD,mGAAmD;QADnD,mFAAwB;QAKtB,0DAAoC;QAApC,4FAAoC;QAGlC,0DAAkC;QAAlC,0FAAkC;QAStC,0DAAyD;QAAzD,mGAAyD;QADzD,sFAA2B;QAKzB,0DAA0C;QAA1C,4FAA0C;QAGxC,0DAAwC;QAAxC,0FAAwC;;6FD9CnD,kBAAkB;cAL9B,uDAAS;eAAC;gBACT,QAAQ,EAAE,gBAAgB;gBAC1B,WAAW,EAAE,6BAA6B;gBAC1C,SAAS,EAAE,CAAC,4BAA4B,CAAC;aAC1C;;;;;;;;;;;;;;AEXD;AAAA;AAAA;AAAkD;;AAO3C,MAAM,cAAc;IAEzB,gBAAgB,CAAC;IAEjB,QAAQ;IACR,CAAC;;4EALU,cAAc;8FAAd,cAAc;QCP3B,oEAAG;QAAA,uEAAY;QAAA,4DAAI;;6FDON,cAAc;cAL1B,uDAAS;eAAC;gBACT,QAAQ,EAAE,WAAW;gBACrB,WAAW,EAAE,wBAAwB;gBACrC,SAAS,EAAE,CAAC,uBAAuB,CAAC;aACrC;;;;;;;;;;;;;;AEND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyC;AACM;AACS;AACI;AACT;AAC+B;AACS;AACH;AAC9C;AACF;AACM;AACO;AACR;;;;AAatC,MAAM,WAAW;;0FAAX,WAAW;gJAAX,WAAW,kBATb;YACP,4DAAY;YACZ,qEAAgB;YAChB,2DAAW;YACX,wEAAkB;YAClB,uDAAW,CAAC,UAAU,CAAC,yDAAyB,EAAE,kDAAkB,EAAE,EAAE,YAAY,EAAE,sDAAsB,EAAE,CAAC;YAC/G,4DAAa,CAAC,UAAU,CAAC,CAAC,kEAAW,CAAC,CAAC;SACxC;mIAEU,WAAW,mBAVP,+DAAc,EAAE,8FAAkB,EAAE,uGAAqB,EAAE,oGAAoB,aAE5F,4DAAY;QACZ,qEAAgB;QAChB,2DAAW;QACX,wEAAkB;6FAKT,WAAW;cAXvB,sDAAQ;eAAC;gBACR,YAAY,EAAE,CAAC,+DAAc,EAAE,8FAAkB,EAAE,uGAAqB,EAAE,oGAAoB,CAAC;gBAC/F,OAAO,EAAE;oBACP,4DAAY;oBACZ,qEAAgB;oBAChB,2DAAW;oBACX,wEAAkB;oBAClB,uDAAW,CAAC,UAAU,CAAC,yDAAyB,EAAE,kDAAkB,EAAE,EAAE,YAAY,EAAE,sDAAsB,EAAE,CAAC;oBAC/G,4DAAa,CAAC,UAAU,CAAC,CAAC,kEAAW,CAAC,CAAC;iBACxC;aACF","file":"users-users-module.js","sourcesContent":["import {\n  ActionReducer,\n  ActionReducerMap,\n  createFeatureSelector,\n  createSelector,\n  MetaReducer\n} from '@ngrx/store';\nimport { environment } from '../../../environments/environment';\n\nexport const stateFeatureKey = 'state';\n\nexport interface State {\n\n}\n\nexport const reducers: ActionReducerMap<State> = {\n\n};\n\n\nexport const metaReducers: MetaReducer<State>[] = !environment.production ? [] : [];\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { UsersComponent } from './users.component';\nimport {UserLoginComponent} from \"./components/user-login/user-login.component\";\nimport {UserRegisterComponent} from \"./components/user-register/user-register.component\";\nimport {UserProfileComponent} from \"./components/user-profile/user-profile.component\";\n\nconst routes: Routes = [\n  { path: '', component: UsersComponent },\n  { path: 'profile', component: UserProfileComponent },\n  { path: 'login', component: UserLoginComponent },\n  { path: 'register', component: UserRegisterComponent }\n  ];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class UsersRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport {IUser} from \"../../models/IUser\";\nimport {Store} from \"@ngrx/store\";\nimport {State} from \"../../../reducers\";\nimport * as userActions from '../../actions/user.actions';\nimport * as userReducer from '../../reducers/user.reducer';\n\n@Component({\n  selector: 'app-user-register',\n  templateUrl: './user-register.component.html',\n  styleUrls: ['./user-register.component.css']\n})\nexport class UserRegisterComponent implements OnInit {\n\n  public user:IUser = {\n    name : '',\n    email : '',\n    password : ''\n  };\n  public isEmpty:boolean = false;\n\n  constructor(private store:Store<State>) { }\n\n  ngOnInit(): void {\n  }\n\n  public submitRegister(){\n    if(this.user.name !== '' && this.user.email !== '' && this.user.password !== ''){\n      // dispatch\n      this.store.dispatch(userActions.registerUser({user : this.user}));\n      this.isEmpty = false;\n    }\n    else{\n      this.isEmpty = true;\n    }\n  }\n}\n","<!-- Intro Section -->\n<section class=\"bg-brains p-3\">\n  <div class=\"container\">\n    <div class=\"row\">\n      <div class=\"col\">\n        <p class=\"h4 animated flipInY\">\n          <i class=\"fa fa-user-cog\"></i> Register Here</p>\n      </div>\n    </div>\n  </div>\n</section>\n<!--<pre>{{user | json}}</pre>-->\n<!-- Login Form -->\n<section class=\"p-3\">\n  <div class=\"container\">\n    <div class=\"row\">\n      <div class=\"col-md-4 m-auto\">\n        <!-- Empty Form Alert -->\n        <div *ngIf=\"isEmpty\" class=\"alert alert-danger alert-dismissible animated zoomIn\">\n          <button class=\"close\" data-dismiss=\"alert\">\n            <i class=\"fa fa-times-circle\"></i>\n          </button>\n          <small>Please fill in the fields</small>\n        </div>\n        <div class=\"card animated jello\">\n          <div class=\"card-header bg-dark text-brains\">\n            <p class=\"h4\">Register</p>\n          </div>\n          <div class=\"card-body bg-brains\">\n            <form #registerForm=\"ngForm\" (submit)=\"submitRegister()\">\n              <div class=\"form-group\">\n                <input\n                  #username=\"ngModel\"\n                  name=\"name\"\n                  [(ngModel)]=\"user.name\"\n                  [class.is-invalid]=\"username.touched && username.invalid\"\n                  [class.is-valid]=\"username.touched && username.valid\"\n                  type=\"text\" class=\"form-control\" placeholder=\"Name\"\n                  required pattern=\"^[a-zA-Z0-9_]{3,16}$\">\n                <div *ngIf=\"username.touched && username.invalid\">\n                  <small class=\"text-danger\">Enter a proper Username</small>\n                </div>\n                <small *ngIf=\"username.touched && username.valid\" class=\"text-success\">\n                  Looks Good\n                </small>\n              </div>\n              <div class=\"form-group\">\n                <input\n                  #email=\"ngModel\"\n                  name=\"email\"\n                  [(ngModel)]=\"user.email\"\n                  [class.is-invalid]=\"email.touched && email.invalid\"\n                  [class.is-valid]=\"email.touched && email.valid\"\n                  type=\"email\" class=\"form-control\" placeholder=\"Email\"\n                required pattern=\"^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$\">\n                <div *ngIf=\"email.touched && email.invalid\">\n                  <small class=\"text-danger\">Enter a proper Email</small>\n                </div>\n                <small *ngIf=\"email.touched && email.valid\" class=\"text-success\">\n                  Looks Good\n                </small>\n              </div>\n              <div class=\"form-group\">\n                <input\n                  #password=\"ngModel\"\n                  name=\"password\"\n                  [(ngModel)]=\"user.password\"\n                  [class.is-invalid]=\"password.touched && password.invalid\"\n                  [class.is-valid]=\"password.touched && password.valid\"\n                  type=\"password\" class=\"form-control\" placeholder=\"Password\"\n                  required pattern=\"^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,20}$\">\n                <div *ngIf=\"password.touched && password.invalid\">\n                  <small class=\"text-danger\">Enter a proper Password</small>\n                </div>\n                <small *ngIf=\"password.touched && password.valid\" class=\"text-success\">\n                  Looks Good\n                </small>\n              </div>\n              <div>\n                <input type=\"submit\" class=\"btn btn-dark text-brains btn-sm\" value=\"Register\">\n              </div>\n              <div>\n                <small>Have an Account ?\n                  <a routerLink=\"/users/login\" class=\"font-weight-bold text-dark\">Login</a>\n                </small>\n              </div>\n            </form>\n          </div>\n          <div class=\"card-footer bg-dark text-center\">\n            <img src=\"../../../../assets/img/brand.PNG\" width=\"180\" height=\"35\" alt=\"\">\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</section>\n","import { Component, OnInit } from '@angular/core';\nimport {IUser} from \"../../models/IUser\";\nimport {UserService} from \"../../services/user.service\";\nimport {IAddress} from \"../../models/IAddress\";\nimport {select, Store} from \"@ngrx/store\";\nimport {State} from \"../../../reducers\";\nimport * as userActions from '../../actions/user.actions';\nimport * as userReducer from '../../reducers/user.reducer';\n\n@Component({\n  selector: 'app-user-profile',\n  templateUrl: './user-profile.component.html',\n  styleUrls: ['./user-profile.component.css']\n})\nexport class UserProfileComponent implements OnInit {\n\n  public userInfo:IUser = {} as IUser;\n  public address:IAddress = {} as IAddress;\n  public enableAddress:boolean = false;\n  public loading:boolean = false;\n  constructor(private userService:UserService,\n              private store:Store<State>) { }\n\n  ngOnInit(): void {\n    this.userInfo = this.userService.getUserInfo();\n    if(this.userInfo){\n      this.address = this.userInfo.address;\n    }\n\n    // get address information from NGRX Store\n    this.store.pipe(select(userReducer.userFeatureKey)).subscribe((state) => {\n       this.loading = state.loading;\n    });\n  }\n\n  public submitUpdateAddress(){\n    this.address = this.trimAddress(this.address);\n    this.store.dispatch(userActions.updateAddress({address : this.address}));\n    // get the updated user from store\n    this.store.pipe(select(userReducer.userFeatureKey)).subscribe((state) => {\n      this.userInfo = state.user;\n      this.address = state.user.address;\n    });\n    this.enableAddress = false;\n  }\n\n  public trimAddress(address:IAddress):IAddress{\n    let tempAddress:IAddress = {\n      flat : address.flat.trim(),\n      street : address.street.trim(),\n      landmark : address.landmark.trim(),\n      city : address.city.trim(),\n      state : address.state.trim(),\n      country: address.country.trim(),\n      pin : address.pin.trim(),\n      mobile : address.mobile.trim(),\n    };\n    return  tempAddress;\n  }\n\n}\n","<!-- Intro Section -->\n<section class=\"bg-brains p-3\">\n  <div class=\"container\">\n    <div class=\"row\">\n      <div class=\"col\">\n        <p class=\"h4 animated flipInY\">\n          <i class=\"fa fa-user-circle\"></i> Your Profile</p>\n      </div>\n    </div>\n  </div>\n</section>\n\n<!-- Profile Section -->\n<section class=\"p-3\">\n  <div class=\"container\">\n    <div class=\"row\">\n      <div class=\"col-md-3 text-center animated jello\">\n        <img [src]=\"userInfo.avatar\" alt=\"\" class=\"img-fluid img-thumbnail rounded-circle\">\n      </div>\n      <div class=\"col-md-9\">\n        <div class=\"card animated zoomIn\">\n          <div class=\"card-header bg-dark text-brains\">\n            <p class=\"h4\">Your Information</p>\n          </div>\n          <div class=\"card-body bg-brains\">\n              <ul class=\"list-group\">\n                <li class=\"list-group-item\">\n                  NAME : {{userInfo.name}}\n                </li>\n                <li class=\"list-group-item\">\n                  Email : {{userInfo.email}}\n                </li>\n                <li class=\"list-group-item\">\n                  Mobile : {{address?.mobile}}\n                </li>\n              </ul>\n          </div>\n        </div>\n\n        <!-- Loading Spinner -->\n        <div *ngIf=\"loading\">\n          <img src=\"../../../../assets/img/spinner.gif\" class=\"m-auto d-block\" alt=\"\">\n        </div>\n\n        <div class=\"card mt-4 animated zoomIn\" *ngIf=\"!loading\">\n          <div class=\"card-header bg-dark text-brains\">\n            <span class=\"h4\">Billing Address</span>\n            <form class=\"form-inline float-right\">\n              <div class=\"custom-control custom-switch\">\n                <input\n                  name=\"enableAddress\"\n                  [(ngModel)]=\"enableAddress\"\n                  type=\"checkbox\" class=\"custom-control-input\" id=\"customSwitch1\">\n                <label class=\"custom-control-label\" for=\"customSwitch1\">Enable Address</label>\n              </div>\n            </form>\n          </div>\n          <div class=\"card-body bg-brains\">\n            <ul class=\"list-group\" *ngIf=\"!enableAddress\">\n              <li class=\"list-group-item\">\n                Flat : {{address.flat}}\n              </li>\n              <li class=\"list-group-item\">\n                Street : {{address.street}}\n              </li>\n              <li class=\"list-group-item\">\n                Landmark : {{address.landmark}}\n              </li>\n              <li class=\"list-group-item\">\n                City : {{address.city}}\n              </li>\n              <li class=\"list-group-item\">\n                State : {{address.state}}\n              </li>\n              <li class=\"list-group-item\">\n                Country : {{address.country}}\n              </li>\n              <li class=\"list-group-item\">\n                Mobile : {{address.mobile}}\n              </li>\n            </ul>\n            <div *ngIf=\"enableAddress\">\n             <!-- <pre>{{address | json}}</pre>-->\n              <form (submit)=\"submitUpdateAddress()\">\n                <div class=\"input-group mb-3\">\n                  <div class=\"input-group-prepend\">\n                    <span class=\"input-group-text bg-dark text-brains\">Flat</span>\n                  </div>\n                  <input\n                    name=\"flat\"\n                    [(ngModel)]=\"address.flat\"\n                    type=\"text\" class=\"form-control\">\n                </div>\n                <div class=\"input-group mb-3\">\n                  <div class=\"input-group-prepend\">\n                    <span class=\"input-group-text bg-dark text-brains\">Street</span>\n                  </div>\n                  <input\n                    name=\"street\"\n                    [(ngModel)]=\"address.street\"\n                    type=\"text\" class=\"form-control\">\n                </div>\n                <div class=\"input-group mb-3\">\n                  <div class=\"input-group-prepend\">\n                    <span class=\"input-group-text bg-dark text-brains\">Landmark</span>\n                  </div>\n                  <input\n                    name=\"landmark\"\n                    [(ngModel)]=\"address.landmark\"\n                    type=\"text\" class=\"form-control\">\n                </div>\n                <div class=\"input-group mb-3\">\n                  <div class=\"input-group-prepend\">\n                    <span class=\"input-group-text bg-dark text-brains\">City</span>\n                  </div>\n                  <input\n                    name=\"city\"\n                    [(ngModel)]=\"address.city\"\n                    type=\"text\" class=\"form-control\">\n                </div>\n                <div class=\"input-group mb-3\">\n                  <div class=\"input-group-prepend\">\n                    <span class=\"input-group-text bg-dark text-brains\">State</span>\n                  </div>\n                  <input\n                    name=\"state\"\n                    [(ngModel)]=\"address.state\"\n                    type=\"text\" class=\"form-control\">\n                </div>\n                <div class=\"input-group mb-3\">\n                  <div class=\"input-group-prepend\">\n                    <span class=\"input-group-text bg-dark text-brains\">Country</span>\n                  </div>\n                  <input\n                    name=\"country\"\n                    [(ngModel)]=\"address.country\"\n                    type=\"text\" class=\"form-control\">\n                </div>\n                <div class=\"input-group mb-3\">\n                  <div class=\"input-group-prepend\">\n                    <span class=\"input-group-text bg-dark text-brains\">Pin Code</span>\n                  </div>\n                  <input\n                    name=\"pin\"\n                    [(ngModel)]=\"address.pin\"\n                    type=\"text\" class=\"form-control\">\n                </div>\n                <div class=\"input-group mb-3\">\n                  <div class=\"input-group-prepend\">\n                    <span class=\"input-group-text bg-dark text-brains\">Mobile</span>\n                  </div>\n                  <input\n                    name=\"mobile\"\n                    [(ngModel)]=\"address.mobile\"\n                    type=\"text\" class=\"form-control\">\n                </div>\n                <div>\n                  <input type=\"submit\" class=\"btn btn-dark text-brains btn-sm\" value=\"Update Address\">\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</section>\n","import { Component, OnInit } from '@angular/core';\nimport {IUser} from \"../../models/IUser\";\nimport {Store} from \"@ngrx/store\";\nimport {State} from \"../../../reducers\";\nimport * as userActions from '../../actions/user.actions';\nimport * as userReducer from '../../reducers/user.reducer';\n\n@Component({\n  selector: 'app-user-login',\n  templateUrl: './user-login.component.html',\n  styleUrls: ['./user-login.component.css']\n})\nexport class UserLoginComponent implements OnInit {\n\n  public user:IUser = {\n    name : '',\n    email : '',\n    password : ''\n  };\n  public isEmpty:boolean = false;\n\n  constructor(private store:Store<State>) { }\n\n  ngOnInit(): void {\n  }\n\n  public submitLogin(){\n    if(this.user.email !== '' && this.user.password !== ''){\n      // dispatch\n      this.store.dispatch(userActions.loginUser({user : this.user}));\n      this.isEmpty = false;\n    }\n    else{\n      this.isEmpty = true;\n    }\n  }\n\n}\n","<!-- Intro Section -->\n<section class=\"bg-brains p-3\">\n  <div class=\"container\">\n    <div class=\"row\">\n      <div class=\"col\">\n        <p class=\"h4 animated flipInY\">\n          <i class=\"fa fa-sign-in-alt\"></i> Login Here</p>\n      </div>\n    </div>\n  </div>\n</section>\n\n<!-- Login Form -->\n<section class=\"p-3\">\n  <div class=\"container\">\n    <div class=\"row\">\n      <div class=\"col-md-4 m-auto\">\n        <!-- Empty Form Alert -->\n        <div *ngIf=\"isEmpty\" class=\"alert alert-danger alert-dismissible animated zoomIn\">\n          <button class=\"close\" data-dismiss=\"alert\">\n            <i class=\"fa fa-times-circle\"></i>\n          </button>\n          <small>Please fill in the fields</small>\n        </div>\n        <div class=\"card animated jello\">\n          <div class=\"card-header bg-dark text-brains\">\n            <p class=\"h4\">Login</p>\n          </div>\n          <div class=\"card-body bg-brains\">\n            <form #loginForm=\"ngForm\" (submit)=\"submitLogin()\">\n              <div class=\"form-group\">\n                <input\n                    #email=\"ngModel\"\n                    name=\"email\"\n                    [(ngModel)]=\"user.email\"\n                    [class.is-invalid]=\"email.touched && email.invalid\"\n                    [class.is-valid]=\"email.touched && email.valid\"\n                    type=\"email\" class=\"form-control\" placeholder=\"Email\"\n                    required pattern=\"^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$\">\n                <div *ngIf=\"email.touched && email.invalid\">\n                  <small class=\"text-danger\">Enter a proper Email</small>\n                </div>\n                <small *ngIf=\"email.touched && email.valid\" class=\"text-success\">\n                  Looks Good\n                </small>\n              </div>\n              <div class=\"form-group\">\n                <input\n                    #password=\"ngModel\"\n                    name=\"password\"\n                    [(ngModel)]=\"user.password\"\n                    [class.is-invalid]=\"password.touched && password.invalid\"\n                    [class.is-valid]=\"password.touched && password.valid\"\n                    type=\"password\" class=\"form-control\" placeholder=\"Password\"\n                    required pattern=\"^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,20}$\">\n                <div *ngIf=\"password.touched && password.invalid\">\n                  <small class=\"text-danger\">Enter a proper Password</small>\n                </div>\n                <small *ngIf=\"password.touched && password.valid\" class=\"text-success\">\n                  Looks Good\n                </small>\n              </div>\n              <div>\n                <input type=\"submit\" class=\"btn btn-dark text-brains btn-sm\" value=\"Login\">\n              </div>\n              <div>\n                <small>New to BrainsKart ?\n                  <a routerLink=\"/users/register\" class=\"font-weight-bold text-dark\">Register</a>\n                </small>\n              </div>\n            </form>\n          </div>\n          <div class=\"card-footer bg-dark text-center\">\n            <img src=\"../../../../assets/img/brand.PNG\" width=\"180\" height=\"35\" alt=\"\">\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</section>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-users',\n  templateUrl: './users.component.html',\n  styleUrls: ['./users.component.css']\n})\nexport class UsersComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>users works!</p>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from \"@angular/common/http\";\nimport { UsersRoutingModule } from './users-routing.module';\nimport { UsersComponent } from './users.component';\nimport { UserLoginComponent } from './components/user-login/user-login.component';\nimport { UserRegisterComponent } from './components/user-register/user-register.component';\nimport { UserProfileComponent } from './components/user-profile/user-profile.component';\nimport { StoreModule } from '@ngrx/store';\nimport * as fromState from './reducers';\nimport { EffectsModule } from '@ngrx/effects';\nimport { UserEffects } from './effects/user.effects';\nimport { FormsModule } from \"@angular/forms\";\n\n@NgModule({\n  declarations: [UsersComponent, UserLoginComponent, UserRegisterComponent, UserProfileComponent],\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    FormsModule,\n    UsersRoutingModule,\n    StoreModule.forFeature(fromState.stateFeatureKey, fromState.reducers, { metaReducers: fromState.metaReducers }),\n    EffectsModule.forFeature([UserEffects])\n  ]\n})\nexport class UsersModule { }\n"],"sourceRoot":"webpack:///"}